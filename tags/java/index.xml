<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 无岸的Blog</title>
    <link>https://nopshore.top/tags/java/</link>
    <description>Recent content in Java on 无岸的Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>本博客文章除特别声明外均为原创，采用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34;&gt; 知识共享署名-非商业性使用-相同方式共享 4.0 许可协议 &lt;/a&gt; &lt;/br&gt;
&amp;copy; 2019 - 2022 &lt;a href=&#34;https://nopshore.top&#34;&gt;无岸&lt;/a&gt; · &lt;a href=&#34;https://icp.gov.moe/?keyword=20210731&#34; target=&#34;_blank&#34;&gt;萌ICP备20210731号&lt;/a&gt;
</copyright>
    <lastBuildDate>Tue, 19 Apr 2022 01:28:17 +0800</lastBuildDate><atom:link href="https://nopshore.top/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java枚举类笔记</title>
      <link>https://nopshore.top/posts/java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 19 Apr 2022 01:28:17 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>方式一 私有化构造器 private final 修饰成员属性 public final static 创建对象（类似单例模式）枚举对象常量 重写toString()方法 继承自Object类 class EnumTest{ private final String name; private final</description>
    </item>
    
    <item>
      <title>Java中String、StringBuffer、StringBuilder笔记</title>
      <link>https://nopshore.top/posts/java%E4%B8%ADstringstringbufferstringbuilder%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 19 Apr 2022 00:15:47 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E4%B8%ADstringstringbufferstringbuilder%E7%AC%94%E8%AE%B0/</guid>
      <description>String String类final修饰的，不可继承。 String内部使用private final修饰的char[]数组存放字符串，private使外</description>
    </item>
    
    <item>
      <title>Java集合笔记</title>
      <link>https://nopshore.top/posts/java%E9%9B%86%E5%90%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 19 Apr 2022 00:10:29 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E9%9B%86%E5%90%88%E7%AC%94%E8%AE%B0/</guid>
      <description>容器相关接口继承结构 Collection List ArrayList LinkedList Vector Set HashSet LinkedHashSet TreeSet Map HashMap LinkedHashMap TreeMap Hashtable properties ConcurrentHashMap List接口 List接口存储的数据是有序的、可重复的 ArrayList 线程不安全 可存储不同类型的对象 底层</description>
    </item>
    
    <item>
      <title>Java面向对象总结</title>
      <link>https://nopshore.top/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 07 Jan 2022 20:53:09 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/</guid>
      <description>继承 子类可以继承父类的所有属性和方法 private关键词： private修饰属性： 子类可以继承，不能直接调用，可以通过父类提供的公开的pub</description>
    </item>
    
    <item>
      <title>Java运算时的自动类型转换</title>
      <link>https://nopshore.top/posts/java%E8%BF%90%E7%AE%97%E6%97%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 18 Aug 2021 03:04:41 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E8%BF%90%E7%AE%97%E6%97%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>精度小于int的数值在运算时会被自动转换为int后进行运算 public class Demo{ public static void main(String[] args){ short s1 = 5; int i1 = 3; s1 = s1 + (short)i1; // 编译报错，不兼容的类型: 从int转换到</description>
    </item>
    
    <item>
      <title>Java面向对象概述（二）：封装</title>
      <link>https://nopshore.top/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%B0%81%E8%A3%85/</link>
      <pubDate>Fri, 11 Oct 2019 17:46:48 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%B0%81%E8%A3%85/</guid>
      <description>封装的作用和优点 减少耦合 保护数据不被外界直接访问 使外部传进来的数据得到效验 保证了安全性 如何封装？ 使用访问权限修饰符对数据进行权限控制 public protected default private</description>
    </item>
    
    <item>
      <title>Java面向对象概述（一）：类的定义与实例化</title>
      <link>https://nopshore.top/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%E4%B8%80%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96/</link>
      <pubDate>Fri, 11 Oct 2019 15:48:42 +0800</pubDate>
      
      <guid>https://nopshore.top/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%E4%B8%80%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96/</guid>
      <description>面向对象三大特征 封装 保护数据不被外部访问 继承 对父类功能的扩展 多态 一个对象的多种形态 类和对象 类是对某一类事物的具有相同特征的抽象，是对象的模板</description>
    </item>
    
  </channel>
</rss>
